//
   Created by gaozy on 12/28/16.

extends doc

block content
    .container
        div(class="nav")
            ul
                li(style="float:right")
                    a(href="/register") Register
                li(style="float:right")
                    a(href="/login") Login
                li
                    a(href="/") ActiveGNS
                li(class="ddown")
                    a(href="#" class="dropbtn") Document
                    div(class="ddown-content")
                        a(href="/doc/activegns") About ActiveGNS
                        a(href="/doc/activecode") How-To Guide
                        a(href="/doc/activequery") API Reference

        h1 Simulate MyXDNS
            hr
            br
        div(style="font-family: 'Raleway',sans-serif;")
            h2 Local test with ActiveGNS
            p(style="font-size: 18px; font-weight: 500;")
                | This document introduces how we simulate MyXDNS(
                a(href="http://dl.acm.org/citation.cfm?id=1242620") paper
                |) with ActiveGNS running locally. Before running this test,
                | please see the
                a(href="https://mobilityfirst.github.io/documentation/")  prerequisites for GNS
                |  for more information.
            h3 1. MyXDNS Scheme
            p(style="font-size: 18px; font-weight: 500;")
                | MyXDNS decouples server selection from DNS request processing.
                | It assumes there exists a pool of replicas for each client region.
                | Its algorithm sorts the replicas based on the weight being assigned to each replicas in the pool.
                | The paper lacks of proof for the "complicated" weight-based sorting algorithm. We simplify the algorithm
                | with a weight-based scheme similar to
                a(href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html")  Route 53 Weighted Routing Policy.
                | We use a pool of the closest replicas to a DNS requester as the pool of service replicas. The source code of MyXDNS scheme is shown below.
                | A video demo can be found
                a(href="")  here.
            h3 2. How-To Guide
            ul(style="font-size: 18px; padding:5px; font-weight: 500;", type="square")
                li Checkout the most recent ActiveGNS from Github, and build application with ant:
                    pre.minicom
                        b git clone https://github.com/ZhaoyuUmass/ActiveGNS
                        br
                        b cd ActiveGNS
                        br
                        b ant
                    br

                li We integrate ActiveGNS with GeoIP to resolve an IP address to a geolocation. To run this demo, you must download the most recent MaxMind GeoIP free tier binary gzipped DB from
                    a(href="http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz")  http://dev.maxmind.com/geoip/geoip2/geolite2/
                    | . Put the unzipped file(GeoLite2-City.mmdb) into
                    b "ActiveGNS/conf/activeCode/"
                    |  folder.
                    br
                    br

                li Run a local server with administrator privilege as the DNS server needs to run on port 53:
                    pre.minicom
                        b sudo bin/gpServer.sh -DgigapaxosConfig=conf/activeCode/gnsserver.1local.withDNS.properties restart all
                    br
                li Run a GNS client to update the test fields and code (administrator privilege is required as the client also needs to write into a local derby db which has been written by the server process):
                    pre.minicom
                        b sudo bin/gpClient.sh -DgigapaxosConfig=conf/activeCode/gnsserver.1local.withDNS.properties \
                        br
                        b edu.umass.cs.gnsclient.client.testing.activecode.schemes.MyXDNS 3.3.3.10
                    |, the last parameter (3.3.3.10) is the client address you want to test with.
                    br

                li Resolve the domain name "myxdns.activegns.org" with command "nslookup"
                    pre.minicom
                        b nslookup myxdns.activegns.org 127.0.0.1
                    | , you should see a returned address for "myxdns.activegns.org" to be either 3.3.3.3 or 3.3.3.4.
                    | Repeat this command, the resolved address is randomly returned as either 3.3.3.3 or 3.3.3.4.

                li Try to setup the client address with other values,
                    pre.minicom
                        b sudo bin/gpClient.sh -DgigapaxosConfig=conf/activeCode/gnsserver.1local.withDNS.properties \
                        br
                        b edu.umass.cs.gnsclient.client.testing.activecode.schemes.MyXDNS
                        i  another_address
                    |, and use the above nslookup command to check the returned result.

                li You could also set the service pool by editing the file
                    b  "conf/activeCode/myxdns"
                    |. This configure file should follow the format as
                    ul(style="list-style-type:none;")
                        li
                            i ip_address1 weight1
                        li
                            i ip_address2 weight2
                        li ...


            h2 MyXDNS active code
            textarea(readonly=true id="code").
                function distance(lat1, lon1, lat2, lon2) {
                    if(lat1 == undefined || lat2 == undefined) return Number.MAX_VALUE;
                    var R = 6371; // Radius of the earth in km
                    var dLat = (lat2 - lat1) * Math.PI / 180;  // deg2rad below
                    var dLon = (lon2 - lon1) * Math.PI / 180;
                    var a =
                        0.5 - Math.cos(dLat)/2 +
                        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                        (1 - Math.cos(dLon))/2;

                    return R * 2 * Math.asin(Math.sqrt(a));
                }

                function sum(x, y){
                    return x+y;
                }

                function run(value, accessor, querier) {

                    var records = value["A"]["record"],
                        client = value["client_ip"],
                        weight = querier.readGuid(null, "weight")["weight"],
                        locs = records.slice(),
                        w = [],
                        indexes = [],
                        dist = [],
                        i = 0;

                    if(client == undefined){
                        // if client ip does not exist, fetch a ip from the test field
                        client = querier.readGuid(null, "testIp")["testIp"];
                    }

                    // query the location info through geoip for all ip addresses
                    locs.push(client);
                    var coords = querier.getLocations(locs); // the returned value is formatted as {ip1: {"latitude":lat1, "longitude":lng1},...}

                    // do not calculate the distance for client
                    for(i=0; i<records.length; i++){
                        dist.push(Math.round(distance(coords[records[i]]["latitude"], coords[records[i]]["longitude"],
                            coords[client]["latitude"], coords[client]["longitude"])));
                    }

                    // figure out all candidates
                    var minimal_distance = Math.min.apply(Math, dist),
                        i = -1;

                    while ((i = dist.indexOf(minimal_distance, i+1)) != -1){
                        indexes.push(i);
                        w.push(weight[i]);
                    }

                    // figure out the weight for all candidates
                    var total = w.reduce(sum);
                    w.forEach(function(element, index){w[index] = element/total});

                    // get the index of the returned replica
                    var r = Math.random(),
                        i = -1;
                    while (r>=0){
                        i++;
                        r = r - w[i];
                    }

                    // strip the replicas that have not been chosen
                    records.splice(indexes[i]+1, records.length);
                    records.splice(0, indexes[i]);

                    return value;
                }

        script.
            var myTextArea = document.getElementById('code');
            var editor = CodeMirror.fromTextArea(myTextArea);
            editor.setSize("100%", "100%");
