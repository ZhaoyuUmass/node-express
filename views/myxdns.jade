//
   Created by gaozy on 12/28/16.

extends doc

block content
    .container
        div(class="nav")
            ul
                li(style="float:right")
                    a(href="/register") Register
                li(style="float:right")
                    a(href="/login") Login
                li
                    a(href="/") ActiveGNS
                li(class="ddown")
                    a(href="#" class="dropbtn") Document
                    div(class="ddown-content")
                        a(href="/doc/activegns") About ActiveGNS
                        a(href="/doc/activecode") How-To Guide
                        a(href="/doc/activequery") API Reference

        h1 Simulate MyXDNS
            hr
            br
        div(style="font-family: 'Raleway',sans-serif; padding:5px;")
            h3 Test with ActiveGNS running locally
                p
                    | This document introduces how we simulate MyXDNS(
                    a(href="http://dl.acm.org/citation.cfm?id=1242620") paper
                    |) with ActiveGNS running locally.

            h3 MyXDNS active code
            textarea(readonly=true id="code").
                function distance(lat1, lon1, lat2, lon2) {
                    if(lat1 == undefined || lat2 == undefined) return Number.MAX_VALUE;
                    var R = 6371; // Radius of the earth in km
                    var dLat = (lat2 - lat1) * Math.PI / 180;  // deg2rad below
                    var dLon = (lon2 - lon1) * Math.PI / 180;
                    var a =
                        0.5 - Math.cos(dLat)/2 +
                        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                        (1 - Math.cos(dLon))/2;

                    return R * 2 * Math.asin(Math.sqrt(a));
                }

                function sum(x, y){
                    return x+y;
                }

                function run(value, accessor, querier) {

                    var records = value["A"]["record"], // an array of IP addresses for all replicas
                        client = value["A"]["client_ip"],
                        weight = querier.readGuid(null, "weight")["weight"],
                        w = [],
                        indexes = [],
                        dist = [],
                        i = 0;

                    if(client == undefined){
                        // if client ip does not exist, fetch a ip from the test field
                        client = querier.readGuid(null, "test_ip")[test_ip];
                    }
                    var coords = querier.getLocations(records.push(client)); // the returned value is formatted as {ip1: {"latitude":lat1, "longitude":lng1},...}

                    for(i=0; i<records.length; i++){
                        dist.push(Math.round(distance(coords[records[i]]["latitude"], coords[records[i]]["longitude"],
                            coords[client]["latitude"], coords[client]["longitude"])));
                    }

                    // figure out all candidates
                    var minimal_distance = Math.min(dist),
                        i = -1;
                    while ((i = dist.indexOf(minimal_distance, i+1)) != -1){
                        indexes.push(i);
                        w.push(weight[i]);
                    }

                    // figure out the weight for all candidates
                    var total = w.reduce(sum);
                    w.forEach(function(element, index){w[index]= element/total});

                    // get the index of the returned replica
                    var r = Math.random(),
                        i = -1;
                    while (r>=0){
                        i++;
                        r = r - w[i];
                    }
                    value["A"]["record"] = [records[indexes[i]]];
                    return value;
                }

        script.
            var myTextArea = document.getElementById('code');
            var editor = CodeMirror.fromTextArea(myTextArea);
            editor.setSize("100%", "100%");
